function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

export default (function (initialState) {
  var previousState = null;
  var currentState = initialState;
  var listeners = [];

  var triggerListeners = function triggerListeners() {
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];

      if (listener && listeners.indexOf(listener) > -1) {
        listener(currentState, previousState);
      }
    }
  };

  var setState = function setState(newState) {
    previousState = currentState;
    currentState = _extends({}, currentState, newState);
    triggerListeners();
  };

  var getState = function getState() {
    return currentState;
  };

  var listen = function listen(newListener) {
    if (listeners.indexOf(newListener) > -1) return;
    listeners.push(newListener);
  };

  var unlisten = function unlisten(oldListener) {
    var oldListenerIndex = listeners.indexOf(oldListener);

    if (oldListenerIndex > -1) {
      listeners.splice(oldListenerIndex, 1);
    }
  };

  return {
    getState: getState,
    setState: setState,
    listen: listen,
    unlisten: unlisten
  };
});