{"version":3,"sources":["webpack:///./src/templates/page.tsx","webpack:///./src/components/SEO.tsx","webpack:///./src/components/product/hero.tsx","webpack:///./src/components/product/schema.tsx","webpack:///./src/templates/product.tsx","webpack:///./src/pages/previews.tsx"],"names":["Page","path","pageContext","preview","main","modules","slug","meta","url","current","className","metaInfo","pagePath","RenderModules","siteRoute","SEO","title","metaTitle","metaDescription","ogImage","openImage","asset","twitterImage","openTitle","openGraphDescription","twitterTitle","twitterDescription","lang","http-equiv","content","property","name","ProductHero","product","productDescription","linkedSite","linkedSiteName","mainImage","imageId","_id","alt","blocks","serializers","Serializer","href","target","showQuantity","ProductSchema","shopify","map","block","_type","children","child","text","join","defaultVariant","sku","price","Product","setPage","useSetPage","useEffect","dangerouslySetInnerHTML","__html","JSON","stringify","cx","client","sanityClient","projectId","process","dataset","useCdn","withCredentials","PreviewPage","document","useState","doc","setDoc","queryDraft","queryPreviewPage","pageQuery","queryPreviewProduct","productQuery","handlePreviewFetch","useCallback","fetch","then","response","res","useLoads","defer","isResolved","error","isPending","isReloading","load","renderPreview","Previews"],"mappings":"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","file":"component---src-pages-previews-tsx-9a9bd8be2ab030621824.js","sourcesContent":["import React from 'react'\r\n\r\nimport { RenderModules } from 'src/utils/renderModules'\r\nimport { SEO } from 'src/components/SEO'\r\n\r\nexport interface PageProps {\r\n  pageContext: {\r\n    main: {\r\n      modules: [],\r\n      slug: {\r\n        current: string\r\n      },\r\n      title: string\r\n    },\r\n    meta: {}\r\n  }\r\n  path?: string\r\n  preview?: boolean\r\n}\r\n\r\nconst Page = ({\r\n  path,\r\n  pageContext,\r\n  preview = false\r\n}: PageProps) => {\r\n  const {\r\n    main: {\r\n      modules,\r\n      slug\r\n    },\r\n    meta\r\n  } = pageContext\r\n\r\n  const url = slug.current === 'home' ? '' : path\r\n  return (\r\n    <div className='mt1 x ac'>\r\n      {preview && (\r\n        <div className='bcblue ac cw x p1'>This is a Preview</div>\r\n      )}\r\n      <SEO metaInfo={meta} pagePath={url} />\r\n      <div className='container--1000 mt2 pt6--800 mxa x al'>\r\n        {RenderModules(modules)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Page","import React from \"react\"\r\nimport Helmet from \"react-helmet\"\r\n\r\nconst siteRoute = \"https://midway-starter.netlify.com\"\r\n\r\nexport const SEO = ({\r\n  pagePath,\r\n  metaInfo,\r\n}: {\r\n  pagePath: string\r\n  metaInfo: {\r\n    metaTitle?: string\r\n    metaDescription?: string\r\n    openImage?: string\r\n    twitterImage?: string\r\n    twitterTitle?: string\r\n    openTitle?: string\r\n    openGraphDescription?: string\r\n    twitterDescription?: string\r\n  }\r\n}) => {\r\n  const title = metaInfo\r\n    ? metaInfo.metaTitle\r\n      ? metaInfo.metaTitle\r\n      : \"Midway\"\r\n    : \"Midway\"\r\n  const metaDescription = metaInfo\r\n    ? metaInfo.metaDescription\r\n      ? metaInfo.metaDescription\r\n      : \"Midway is an Open source Headless  Shopify + Sanity starter.\"\r\n    : \"Midway is an Open source Headless  Shopify + Sanity starter.\"\r\n  const metaKeywords = \"midway, sanity, shopify, graphql, starter\"\r\n  const ogImage = metaInfo\r\n    ? metaInfo.openImage\r\n      ? metaInfo.openImage.asset.url\r\n      : \"\"\r\n    : \"\"\r\n  const twitterImage = metaInfo\r\n    ? metaInfo.twitterImage\r\n      ? metaInfo.twitterImage.asset.url\r\n      : \"\"\r\n    : \"\"\r\n  const openTitle = metaInfo\r\n    ? metaInfo.openTitle\r\n      ? metaInfo.openTitle\r\n      : title\r\n    : title\r\n  const openGraphDescription = metaInfo\r\n    ? metaInfo.openGraphDescription\r\n      ? metaInfo.openGraphDescription\r\n      : metaDescription\r\n    : metaDescription\r\n  const twitterTitle = metaInfo\r\n    ? metaInfo.twitterTitle\r\n      ? metaInfo.twitterTitle\r\n      : title\r\n    : title\r\n  const twitterDescription = metaInfo\r\n    ? metaInfo.twitterDescription\r\n      ? metaInfo.twitterDescription\r\n      : metaDescription\r\n    : metaDescription\r\n  return (\r\n    <Helmet title={title}>\r\n      <html lang=\"en\" />\r\n      <meta http-equiv=\"Accept-CH\" content=\"DPR, Width, Viewport-Width\" />\r\n      <meta property=\"og:locale\" content=\"en_US\" />\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta name=\"keywords\" content={metaKeywords} />\r\n      <meta\r\n        property=\"og:url\"\r\n        content={`${siteRoute}/${pagePath ? pagePath : \"\"}`}\r\n      />\r\n      <meta property=\"og:image\" content={ogImage} />\r\n      <meta property=\"og:title\" content={`${openTitle}`} />\r\n      <meta property=\"og:site_name\" content=\"Midway\" />\r\n      <meta property=\"og:description\" content={openGraphDescription} />\r\n      <meta name=\"twitter:site\" content=\"@Midway\" />\r\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n      <meta name=\"twitter:title\" content={`${twitterTitle}`} />\r\n      <meta name=\"twitter:image:src\" content={twitterImage} />\r\n      <meta name=\"twitter:description\" content={twitterDescription} />\r\n      <meta\r\n        name=\"twitter:url\"\r\n        content={`${siteRoute}/${pagePath ? pagePath : \"\"}`}\r\n      />\r\n    </Helmet>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport BlockContent from \"@sanity/block-content-to-react\"\r\n\r\nimport { Serializer } from \"src/utils/serializer\"\r\nimport { Image } from 'src/components/image'\r\nimport { ProductForm } from './form'\r\n\r\nexport const ProductHero = ({ product, main: { title, productDescription, linkedSite, linkedSiteName, mainImage }}: {\r\n  main: {\r\n    title?: string\r\n    subTitle?: string\r\n    slug: {}\r\n    productDescription?: []\r\n    mainImage: {\r\n      asset: {\r\n        _id: string\r\n      }\r\n    }\r\n    linkedSite: string\r\n    linkedSiteName: string\r\n    cerealImage: {}\r\n  }\r\n  product: {\r\n    defaultPrice: string\r\n    productId: number\r\n  }\r\n}) => {\r\n  return (\r\n    <div className='product__hero'>\r\n      <div className='container--xl p1 outer mxa'>\r\n        <div className='row df aic'>\r\n          <div className='col c12 c6--800 x'>\r\n            <Image className='x' imageId={mainImage.asset._id} alt={title} />\r\n          </div>\r\n          <div className='col c12 c6--800'>\r\n            <div className='p4--800'>\r\n              <h1 className='mb2'>{title}</h1>\r\n              {productDescription && (<BlockContent blocks={productDescription} serializers={Serializer} />)}\r\n              {linkedSite && linkedSiteName && (\r\n                <div className='callout bg--blue color--white p1 my1'>\r\n                  Shop the real product on the <a href={linkedSite} className='cw underline' target='_blank'>{linkedSiteName}</a> Website.\r\n                </div>\r\n              )}\r\n              <ProductForm {...product} showQuantity={true} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","const siteRoute = \"https://midway-starter.netlify.com\"\r\n\r\nfunction toPlainText(blocks = []) {\r\n  return blocks\r\n    .map((block: {\r\n      _type: string\r\n      children: any\r\n    }) => {\r\n      if (block._type !== 'block' || !block.children) {\r\n        return ''\r\n      }\r\n      return block.children.map((child: { text: any }) => child.text).join('')\r\n    })\r\n    .join('\\n\\n')\r\n}\r\n\r\nexport const ProductSchema = (main: {\r\n  title: string\r\n  productDescription?: []\r\n  mainImage?: {\r\n    asset: {\r\n      url: string\r\n    }\r\n  }\r\n  slug: {\r\n    current: string\r\n  }\r\n}, shopify: {\r\n  defaultVariant: {\r\n    sku: string\r\n    price: string\r\n  }\r\n}) => {\r\n  const schema = {\r\n    \"@context\": \"https://schema.org/\",\r\n    \"@type\": \"Product\",\r\n    \"name\": main.title,\r\n    \"image\": main.mainImage && main.mainImage.asset.url,\r\n    \"description\": main.productDescription && toPlainText(main.productDescription),\r\n    \"sku\": shopify.defaultVariant.sku,\r\n    \"mpn\": shopify.defaultVariant.sku,\r\n    \"price\": shopify.defaultVariant.price,\r\n    \"brand\": {\r\n      \"@type\": \"Thing\",\r\n      \"name\": \"Midway\"\r\n    },\r\n    \"offers\": {\r\n      \"@type\": \"Offer\",\r\n      \"url\": `${siteRoute}/products/${main.slug.current}`,\r\n      \"priceCurrency\": \"USD\",\r\n      \"price\": shopify.defaultVariant.price,\r\n      \"itemCondition\": \"https://schema.org/UsedCondition\",\r\n      \"availability\": \"https://schema.org/InStock\",\r\n      \"seller\": {\r\n        \"@type\": \"Organization\",\r\n        \"name\": \"Midway\"\r\n      }\r\n    },\r\n    // FIXME: If you have reviews modify this area\r\n    // \"aggregrateRating\": {\r\n    //   \"@type\": \"AggregateRating\",\r\n    //   \"ratingValue\": '4.5,\r\n    //   \"itemReviewed\": {\r\n    //     \"@type\": \"Product\",\r\n    //     \"name\": title,\r\n    //     \"brand\": \"Midway\"\r\n    //   }\r\n    // },\r\n    // FIXME: If you have reviews modify this area\r\n    // \"review\": {\r\n    //   \"@type\": \"Review\",\r\n    //   \"reviewRating\": {\r\n    //     \"@type\": \"Rating\",\r\n    //     \"ratingValue\": reviews && reviews.reviews[0] && reviews.reviews[0][0].node.score\r\n    //   },\r\n    //   \"author\": {\r\n    //     \"@type\": \"Person\",\r\n    //     \"name\": reviews && reviews.reviews[0] && reviews.reviews[0][0].node.name\r\n    //   },\r\n    //   \"reviewBody\": reviews && reviews.reviews[0] && reviews.reviews[0][0].node.content\r\n    // }\r\n  }\r\n  return schema\r\n}","import React, { useEffect } from 'react'\r\nimport cx from 'classnames'\r\n\r\nimport { RenderModules } from 'src/utils/renderModules'\r\n\r\nimport { ProductHero } from 'src/components/product/hero'\r\nimport { ProductSchema } from 'src/components/product/schema'\r\n\r\nimport { useSetPage } from 'src/context/siteContext'\r\nimport { SEO } from 'src/components/SEO'\r\n\r\nexport interface ProductProps {\r\n  pageContext: {\r\n    main: {\r\n      modules: [],\r\n      slug: {\r\n        current: string\r\n      },\r\n      title: string\r\n    },\r\n    meta: {}\r\n    shopify: {}\r\n  }\r\n  preview?: boolean\r\n}\r\n\r\nconst Product = ({\r\n  pageContext,\r\n  preview = false\r\n}: ProductProps) => {\r\n  const setPage = useSetPage()\r\n  const { main } = pageContext\r\n  const {\r\n    main: {\r\n      modules,\r\n      slug\r\n    },\r\n    meta,\r\n    shopify\r\n  } = pageContext\r\n  useEffect(() => {\r\n    setPage(pageContext.main.slug.current)\r\n  }, [0])\r\n\r\n  const url = `products/${slug.current}`\r\n  return (\r\n    <div className='ac x'>\r\n      {preview && (\r\n        <div className='bcblue ac cw x p1'>This is a Preview</div>\r\n      )}\r\n      <div dangerouslySetInnerHTML={{\r\n          __html: `\r\n            <script type=\"application/ld+json\">\r\n              ${JSON.stringify(ProductSchema(main, shopify))}\r\n            </script>\r\n          `\r\n        }} />\r\n      <SEO metaInfo={meta} pagePath={url} />\r\n      <div className={cx('mxa x al site__main', pageContext.main.slug.current)}>\r\n        <ProductHero main={pageContext.main} product={shopify} />\r\n        {RenderModules(modules)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Product","import React, { useState, useEffect, useCallback} from \"react\"\r\nimport { Router } from \"@reach/router\"\r\n\r\nimport { useLoads } from 'react-loads'\r\n\r\nimport Page from \"src/templates/page\"\r\nimport Product from \"src/templates/product\"\r\n\r\nimport sanityClient  from \"@sanity/client\"\r\n\r\nimport {\r\n  pageQuery,\r\n  productQuery\r\n} from \"src/utils/queries\"\r\n\r\nconst client = sanityClient({\r\n  projectId: process.env.GATSBY_SANITY_PROJECT_ID,\r\n  dataset: process.env.GATSBY_SANITY_DATASET,\r\n  useCdn: false, \r\n  withCredentials: true,\r\n})\r\n\r\nconst PreviewPage = ({ document }: { document: string }) => {\r\n  const [doc, setDoc] = useState(null as any)\r\n\r\n  \r\n  //  @ts-ignore\r\n  const queryDraft = `*[_id == \"${document}\"]  {\r\n    ...,\r\n  }`\r\n\r\n  // @ts-ignore\r\n  const queryPreviewPage = `*[_id == \"${document}\"]  {\r\n    ${pageQuery}\r\n  }`\r\n\r\n  // @ts-ignore\r\n  const queryPreviewProduct = `*[_id == \"${document}\"]  {\r\n    ${productQuery}\r\n  }`\r\n\r\n  const handlePreviewFetch = useCallback(\r\n    () => \r\n      client\r\n        .fetch(queryDraft)\r\n        .then((response: any) => {\r\n          switch (response[0]._type) {\r\n            case 'page':\r\n              client.fetch(queryPreviewPage).then(res => {\r\n                setDoc(res[0])\r\n              })\r\n              break\r\n            case 'product':\r\n              client.fetch(queryPreviewProduct).then(res => {\r\n                setDoc(res[0])\r\n              })\r\n              break\r\n            default:\r\n              break\r\n          }\r\n        }),\r\n      []\r\n  )\r\n\r\n  const { error, isResolved, isPending, isReloading, load } = useLoads(\r\n    'handlePreviewFetch',\r\n    handlePreviewFetch as any,\r\n    {\r\n      defer: true,\r\n    }\r\n  )\r\n\r\n  useEffect(() => {\r\n    load()\r\n  }, [0])\r\n\r\n  const renderPreview = () => {\r\n    if (doc) {\r\n      switch (doc._type) {\r\n        case 'page': return <Page pageContext={doc.content} preview={true} />\r\n        case 'product': return <Product pageContext={doc.content} preview={true} />\r\n        default: break\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      {(isPending ||\r\n        isReloading) && (\r\n        <div className='ac'><span>Loading</span></div>\r\n      )}\r\n      {isResolved && !isPending && renderPreview()}\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst Previews = () => {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <PreviewPage path=\"/previews/:document\" />\r\n      </Router>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Previews\r\n"],"sourceRoot":""}