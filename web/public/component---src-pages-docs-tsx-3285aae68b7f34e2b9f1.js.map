{"version":3,"sources":["webpack:///./src/templates/documentation.tsx","webpack:///./src/pages/docs.tsx"],"names":["Documentation","path","pageContext","modules","preview","main","meta","className","RenderModules","client","sanityClient","projectId","process","dataset","useCdn","withCredentials","PreviewPage","document","useState","doc","setDoc","queryDraft","queryPreviewDocs","pageQuery","handlePreviewFetch","useCallback","fetch","then","response","_type","res","useLoads","defer","isResolved","error","isPending","isReloading","load","useEffect","console","log","content","renderPreview","Docs"],"mappings":"gKAwCeA,EArBO,SAAC,GAIG,EAHxBC,KAGwB,IAFxBC,EAEwB,EAFxBA,YAKIC,GAHoB,EADxBC,QAOIF,EAJFG,KACEF,SAGAD,EADFI,KAGF,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,yBACZC,YAAcL,M,iCCrBjBM,EAASC,IAAa,CAC1BC,UAAWC,WACXC,QAASD,aACTE,QAAQ,EACRC,iBAAiB,IAGbC,EAAc,SAAC,GAAuC,IAArCC,EAAqC,EAArCA,SAAqC,EACpCC,mBAAS,MAAxBC,EADmD,KAC9CC,EAD8C,KAKpDC,EAAa,aAAaJ,EAAhB,uBAKVK,EAAgB,aAAeL,EAAf,cAClBM,YADkB,QAIhBC,EAAqBC,uBACzB,kBACEhB,EACGiB,MAAML,GACNM,MAAK,SAACC,GACL,OAAQA,EAAS,GAAGC,OAClB,IAAK,MACHpB,EAAOiB,MAAMJ,GAAkBK,MAAK,SAAAG,GAClCV,EAAOU,EAAI,aAOrB,IA7BsD,EAgCEC,YAC1D,qBACAP,EACA,CACEQ,OAAO,IAJIC,GAhC2C,EAgClDC,MAhCkD,EAgC3CD,YAAYE,EAhC+B,EAgC/BA,UAAWC,EAhCoB,EAgCpBA,YAAaC,EAhCO,EAgCPA,KAQnDC,qBAAU,WACRD,MACC,CAAC,IAWJ,OACE,qCACIF,GACAC,IACA,yBAAK7B,UAAU,MAAK,0CAErB0B,IAAeE,GAfE,WACpB,GAAIhB,EAEF,OADCoB,QAAQC,IAAI,WAAYrB,GACjBA,EAAIU,OACV,IAAK,MAAO,OAAO,kBAAC,EAAD,CAAe3B,YAAaiB,EAAIsB,QAASrC,SAAS,KAW1CsC,KAgBpBC,UAVF,WACX,OACE,6BACE,kBAAC,SAAD,KACE,kBAAC,EAAD,CAAa1C,KAAK","file":"component---src-pages-docs-tsx-3285aae68b7f34e2b9f1.js","sourcesContent":["import React from 'react'\r\n\r\nimport { RenderModules } from 'src/utils/renderModules'\r\n\r\nexport interface DocumentationProps {\r\n  pageContext: {\r\n    main: {\r\n      modules: [],\r\n      slug: {\r\n        current: string\r\n      },\r\n      title: string\r\n    },\r\n    meta: {}\r\n  }\r\n  path?: string\r\n  preview?: boolean\r\n}\r\n\r\nconst Documentation = ({\r\n  path,\r\n  pageContext,\r\n  preview = false\r\n}: DocumentationProps) => {\r\n  const {\r\n    main: {\r\n      modules\r\n    },\r\n    meta\r\n  } = pageContext\r\n\r\n  return (\r\n    <div className='mt1 x ac'>\r\n      <div className='container--m mxa x al'>\r\n        {RenderModules(modules)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Documentation","import React, { useState, useEffect, useCallback} from \"react\"\r\nimport { Router } from \"@reach/router\"\r\n\r\nimport { useLoads } from 'react-loads'\r\n\r\nimport Documentation from \"src/templates/documentation\"\r\n\r\nimport sanityClient  from \"@sanity/client\"\r\n\r\nimport {\r\n  pageQuery\r\n} from \"src/utils/queries\"\r\n\r\nconst client = sanityClient({\r\n  projectId: process.env.GATSBY_SANITY_PROJECT_ID,\r\n  dataset: process.env.GATSBY_SANITY_DATASET,\r\n  useCdn: false, \r\n  withCredentials: true,\r\n})\r\n\r\nconst PreviewPage = ({ document }: { document: string }) => {\r\n  const [doc, setDoc] = useState(null as any)\r\n\r\n  \r\n  //  @ts-ignore\r\n  const queryDraft = `*[_id == \"${document}\"]  {\r\n    ...,\r\n  }`\r\n\r\n  // @ts-ignore\r\n  const queryPreviewDocs= `*[_id == \"${document}\"]  {\r\n    ${pageQuery}\r\n  }`\r\n\r\n  const handlePreviewFetch = useCallback(\r\n    () => \r\n      client\r\n        .fetch(queryDraft)\r\n        .then((response: any) => {\r\n          switch (response[0]._type) {\r\n            case 'doc':\r\n              client.fetch(queryPreviewDocs).then(res => {\r\n                setDoc(res[0])\r\n              })\r\n              break\r\n            default:\r\n              break\r\n          }\r\n        }),\r\n      []\r\n  )\r\n\r\n  const { error, isResolved, isPending, isReloading, load } = useLoads(\r\n    'handlePreviewFetch',\r\n    handlePreviewFetch as any,\r\n    {\r\n      defer: true,\r\n    }\r\n  )\r\n\r\n  useEffect(() => {\r\n    load()\r\n  }, [0])\r\n\r\n  const renderPreview = () => {\r\n    if (doc) {\r\n      {console.log('nothing?', doc)}\r\n      switch (doc._type) {\r\n        case 'doc': return <Documentation pageContext={doc.content} preview={true} />\r\n        default: break\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      {(isPending ||\r\n        isReloading) && (\r\n        <div className='ac'><span>Loading</span></div>\r\n      )}\r\n      {isResolved && !isPending && renderPreview()}\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst Docs = () => {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <PreviewPage path=\"/docs/:document\" />\r\n      </Router>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Docs\r\n"],"sourceRoot":""}